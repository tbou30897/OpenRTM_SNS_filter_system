#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- Python -*-

"""
 @file result_out.py
 @brief ModuleDescription
 @date $Date$


"""
import sys
import time
sys.path.append(".")

# Import RTM module
import RTC
import OpenRTM_aist

#import関係はここ
import time
from pprint import pprint

# Import Service implementation class
# <rtc-template block="service_impl">

# </rtc-template>

# Import Service stub modules
# <rtc-template block="consumer_import">
# </rtc-template>


# This module's spesification
# <rtc-template block="module_spec">
result_out_spec = ["implementation_id", "result_out",
		 "type_name",         "result_out",
		 "description",       "ModuleDescription",
		 "version",           "1.0.0",
		 "vendor",            "VenderName",
		 "category",          "Category",
		 "activity_type",     "STATIC",
		 "max_instance",      "1",
		 "language",          "Python",
		 "lang_type",         "SCRIPT",
		 "conf.default.emotion_selection", "0",

		 "conf.__widget__.emotion_selection", "text",

         "conf.__type__.emotion_selection", "int",

		 ""]
# </rtc-template>

##
# @class result_out
# @brief ModuleDescription
#
#
class result_out(OpenRTM_aist.DataFlowComponentBase):

	##
	# @brief constructor
	# @param manager Maneger Object
	#
	def __init__(self, manager):
		OpenRTM_aist.DataFlowComponentBase.__init__(self, manager)

		self._d_SentimentIn = OpenRTM_aist.instantiateDataType(RTC.TimedWStringSeq)
		"""
		"""
		self._SentimentInIn = OpenRTM_aist.InPort("SentimentIn", self._d_SentimentIn)
		self._d_SwearingIn = OpenRTM_aist.instantiateDataType(RTC.TimedWStringSeq)
		"""
		"""
		self._SwearingInIn = OpenRTM_aist.InPort("SwearingIn", self._d_SwearingIn)
		self._d_TextIn = OpenRTM_aist.instantiateDataType(RTC.TimedWStringSeq)
		"""
		"""
		self._TextInIn = OpenRTM_aist.InPort("TextIn", self._d_TextIn)





		# initialize of configuration-data.
		# <rtc-template block="init_conf_param">
		"""
		
		 - Name:  emotion_selection
		 - DefaultValue: 0
		"""
		self._emotion_selection = [0]

		# </rtc-template>



	##
	#
	# The initialize action (on CREATED->ALIVE transition)
	# formaer rtc_init_entry()
	#
	# @return RTC::ReturnCode_t
	#
	#
	def onInitialize(self):
		# Bind variables and configuration variable
		self.bindParameter("emotion_selection", self._emotion_selection, "0")

		# Set InPort buffers
		self.addInPort("SentimentIn",self._SentimentInIn)
		self.addInPort("SwearingIn",self._SwearingInIn)
		self.addInPort("TextIn",self._TextInIn)

		# Set OutPort buffers

		# Set service provider to Ports

		# Set service consumers to Ports

		# Set CORBA Service Ports

		return RTC.RTC_OK

	###
	##
	## The finalize action (on ALIVE->END transition)
	## formaer rtc_exiting_entry()
	##
	## @return RTC::ReturnCode_t
	#
	##
	#def onFinalize(self):
	#
	#	return RTC.RTC_OK

	###
	##
	## The startup action when ExecutionContext startup
	## former rtc_starting_entry()
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##
	##
	#def onStartup(self, ec_id):
	#
	#	return RTC.RTC_OK

	###
	##
	## The shutdown action when ExecutionContext stop
	## former rtc_stopping_entry()
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##
	##
	#def onShutdown(self, ec_id):
	#
	#	return RTC.RTC_OK

	##
	#
	# The activated action (Active state entry action)
	# former rtc_active_entry()
	#
	# @param ec_id target ExecutionContext Id
	#
	# @return RTC::ReturnCode_t
	#
	#
	def onActivated(self, ec_id):
		#本文、感情、規制単語が入るリストを作成
		self.text = []
		self.sentiment = []
		self.swearing = []

		time.sleep(3)
		return RTC.RTC_OK

	##
	#
	# The deactivated action (Active state exit action)
	# former rtc_active_exit()
	#
	# @param ec_id target ExecutionContext Id
	#
	# @return RTC::ReturnCode_t
	#
	#
	def onDeactivated(self, ec_id):
	
		return RTC.RTC_OK

	##
	#
	# The execution action that is invoked periodically
	# former rtc_active_do()
	#
	# @param ec_id target ExecutionContext Id
	#
	# @return RTC::ReturnCode_t
	#
	#
	def onExecute(self, ec_id):
		#本文が来たらlist1に格納
		if self._TextInIn.isNew(): #新しいデータが来たか確認
			self._d_TextIn = self._TextInIn.read() #値を読み込む



		#感情値が来たらlist2に格納
		if self._SentimentInIn.isNew(): #新しいデータが来たか確認
			self._d_SentimentIn = self._SentimentInIn.read() #値を読み込む


		#規制単語が来たらlist3に格納
		if self._SentimentInIn.isNew(): #新しいデータが来たか確認
			self._d_SwearingIn = self._SwearingInIn.read() #値を読み込む


		return RTC.RTC_OK

	###
	##
	## The aborting action when main logic error occurred.
	## former rtc_aborting_entry()
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##
	##
	#def onAborting(self, ec_id):
	#
	#	return RTC.RTC_OK

	###
	##
	## The error action in ERROR state
	## former rtc_error_do()
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##
	##
	#def onError(self, ec_id):
	#
	#	return RTC.RTC_OK

	###
	##
	## The reset action that is invoked resetting
	## This is same but different the former rtc_init_entry()
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##
	##
	#def onReset(self, ec_id):
	#
	#	return RTC.RTC_OK

	###
	##
	## The state update action that is invoked after onExecute() action
	## no corresponding operation exists in OpenRTm-aist-0.2.0
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##

	##
	#def onStateUpdate(self, ec_id):
	#
	#	return RTC.RTC_OK

	###
	##
	## The action that is invoked when execution context's rate is changed
	## no corresponding operation exists in OpenRTm-aist-0.2.0
	##
	## @param ec_id target ExecutionContext Id
	##
	## @return RTC::ReturnCode_t
	##
	##
	#def onRateChanged(self, ec_id):
	#
	#	return RTC.RTC_OK




def result_outInit(manager):
    profile = OpenRTM_aist.Properties(defaults_str=result_out_spec)
    manager.registerFactory(profile,
                            result_out,
                            OpenRTM_aist.Delete)

def MyModuleInit(manager):
    result_outInit(manager)

    # Create a component
    comp = manager.createComponent("result_out")

def main():
	mgr = OpenRTM_aist.Manager.init(sys.argv)
	mgr.setModuleInitProc(MyModuleInit)
	mgr.activateManager()
	mgr.runManager()

if __name__ == "__main__":
	main()

