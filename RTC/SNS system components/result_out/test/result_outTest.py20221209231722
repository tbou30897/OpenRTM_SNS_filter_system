#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- Python -*-

# <rtc-template block="description">
"""
 @file result_outTest.py
 @brief This component outputs filtered results based on the results of sentiment analysis, the results of the sharing, and the position of the swear words.
 @date $Date$


"""
# </rtc-template>

from __future__ import print_function
import sys
import time
sys.path.append(".")

# Import RTM module
import RTC
import OpenRTM_aist


# Import Service implementation class
# <rtc-template block="service_impl">

import result_out

# </rtc-template>

# Import Service stub modules
# <rtc-template block="consumer_import">
# </rtc-template>


# This module's spesification
# <rtc-template block="module_spec">
result_outtest_spec = ["implementation_id", "result_outTest", 
         "type_name",         "result_outTest", 
         "description",       "This component outputs filtered results based on the results of sentiment analysis, the results of the sharing, and the position of the swear words.", 
         "version",           "1.0.0", 
         "vendor",            "tbou30897", 
         "category",          "result output", 
         "activity_type",     "STATIC", 
         "max_instance",      "1", 
         "language",          "Python", 
         "lang_type",         "SCRIPT",
         "conf.default.emotion_selection", "0",

         "conf.__widget__.emotion_selection", "text",

         "conf.__type__.emotion_selection", "float",

         ""]
# </rtc-template>

# <rtc-template block="component_description">
##
# @class result_outTest
# @brief This component outputs filtered results based on the results of sentiment analysis, the results of the sharing, and the position of the swear words.
# 
# 
# </rtc-template>
class result_outTest(OpenRTM_aist.DataFlowComponentBase):
    
    ##
    # @brief constructor
    # @param manager Maneger Object
    # 
    def __init__(self, manager):
        OpenRTM_aist.DataFlowComponentBase.__init__(self, manager)

        self._d_SentimentScoreIn = OpenRTM_aist.instantiateDataType(RTC.TimedShortSeq)
        """
        Label（-1~1の感情値）を受信する
        """
        self._SentimentScoreInOut = OpenRTM_aist.OutPort("SentimentScoreIn", self._d_SentimentScoreIn)
        self._d_SentimentLabelIn = OpenRTM_aist.instantiateDataType(RTC.TimedWStringSeq)
        """
        Label（ポジティブorネガティブ）を受信する
        """
        self._SentimentLabelInOut = OpenRTM_aist.OutPort("SentimentLabelIn", self._d_SentimentLabelIn)
        self._d_TextIn = OpenRTM_aist.instantiateDataType(RTC.TimedWStringSeq)
        """
        分かち書き結果を受信する。
        """
        self._TextInOut = OpenRTM_aist.OutPort("TextIn", self._d_TextIn)
        self._d_SwearingIn = OpenRTM_aist.instantiateDataType(RTC.TimedShortSeq)
        """
        悪口の位置のデータを受信する。
        """
        self._SwearingInOut = OpenRTM_aist.OutPort("SwearingIn", self._d_SwearingIn)


        


        # initialize of configuration-data.
        # <rtc-template block="init_conf_param">
        """
        
         - Name:  emotion_selection
         - DefaultValue: 0
        """
        self._emotion_selection = [0]
        
        # </rtc-template>


         
    ##
    #
    # The initialize action (on CREATED->ALIVE transition)
    # 
    # @return RTC::ReturnCode_t
    # 
    #
    def onInitialize(self):
        # Bind variables and configuration variable
        self.bindParameter("emotion_selection", self._emotion_selection, "0")
        
        # Set InPort buffers
        
        # Set OutPort buffers
        self.addOutPort("SentimentScoreIn",self._SentimentScoreInOut)
        self.addOutPort("SentimentLabelIn",self._SentimentLabelInOut)
        self.addOutPort("TextIn",self._TextInOut)
        self.addOutPort("SwearingIn",self._SwearingInOut)
        
        # Set service provider to Ports
        
        # Set service consumers to Ports
        
        # Set CORBA Service Ports
        
        return RTC.RTC_OK
    
    ###
    ## 
    ## The finalize action (on ALIVE->END transition)
    ## 
    ## @return RTC::ReturnCode_t
    #
    ## 
    #def onFinalize(self):
    #
    #    return RTC.RTC_OK
    
    #    ##
    ##
    ## The startup action when ExecutionContext startup
    ## 
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    ##
    ##
    #def onStartup(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    ###
    ##
    ## The shutdown action when ExecutionContext stop
    ##
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    ##
    ##
    #def onShutdown(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    ##
    #
    # The activated action (Active state entry action)
    #
    # @param ec_id target ExecutionContext Id
    # 
    # @return RTC::ReturnCode_t
    #
    #
    def onActivated(self, ec_id):
    
        return RTC.RTC_OK
    
        ##
    #
    # The deactivated action (Active state exit action)
    #
    # @param ec_id target ExecutionContext Id
    #
    # @return RTC::ReturnCode_t
    #
    #
    def onDeactivated(self, ec_id):
    
        return RTC.RTC_OK
    
    ##
    #
    # The execution action that is invoked periodically
    #
    # @param ec_id target ExecutionContext Id
    #
    # @return RTC::ReturnCode_t
    #
    #
    def onExecute(self, ec_id):
    
        return RTC.RTC_OK
    
    ###
    ##
    ## The aborting action when main logic error occurred.
    ##
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    #    #
    ##
    #def onAborting(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    ###
    ##
    ## The error action in ERROR state
    ##
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    ##
    ##
    #def onError(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    ###
    ##
    ## The reset action that is invoked resetting
    ##
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    ##
    ##
    #def onReset(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    ###
    ##
    ## The state update action that is invoked after onExecute() action
    ##
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    ##

    ##
    #def onStateUpdate(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    ###
    ##
    ## The action that is invoked when execution context's rate is changed
    ##
    ## @param ec_id target ExecutionContext Id
    ##
    ## @return RTC::ReturnCode_t
    ##
    ##
    #def onRateChanged(self, ec_id):
    #
    #    return RTC.RTC_OK
    
    def runTest(self):
        return True

def RunTest():
    manager = OpenRTM_aist.Manager.instance()
    comp = manager.getComponent("result_outTest0")
    if comp is None:
        print('Component get failed.', file=sys.stderr)
        return False
    return comp.runTest()

def result_outTestInit(manager):
    profile = OpenRTM_aist.Properties(defaults_str=result_outtest_spec)
    manager.registerFactory(profile,
                            result_outTest,
                            OpenRTM_aist.Delete)

def MyModuleInit(manager):
    result_outTestInit(manager)
    result_out.result_outInit(manager)

    # Create a component
    comp = manager.createComponent("result_outTest")

def main():
    mgr = OpenRTM_aist.Manager.init(sys.argv)
    mgr.setModuleInitProc(MyModuleInit)
    mgr.activateManager()
    mgr.runManager(True)

    ret = RunTest()
    mgr.shutdown()

    if ret:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()

